{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickNum","num","exp","is_overlapped","state","operator","num_displayed","is_first_num","num_saved","is_float","num_under_point","is_under_first_num","num_pow","shadow","Math","pow","setState","refreshValue","clickOper","oper","clickPoint","react_default","a","createElement","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12662780.chunk.js","sourcesContent":["    import React, { Component } from 'react';\n    // import logo from './logo.svg';\n    import './App.css';\n\n    class App extends Component {\n\n      constructor(props){\n        super(props);\n        this.state = {\n          operator: false,\n          is_overlapped: false,\n          is_first_num: true,\n          is_float: false,\n          num_saved: 0, // (1st number or total number)\n          num_displayed: 0, // (2st number)\n          num_under_point: 0, // (float number)\n          is_under_first_num: true,\n          num_pow: 0,\n          shadow: \" \"\n        }\n      }\n\n      clickNum = (num) => () => {\n        let is_overlapped = this.state.is_overlapped;\n        let operator = this.state.operator;\n        let num_displayed = this.state.num_displayed;\n        let is_first_num = this.state.is_first_num;\n        let num_saved = this.state.num_saved;\n        let is_float = this.state.is_float;\n        let num_under_point = this.state.num_under_point;\n        let is_under_first_num = this.state.is_under_first_num;\n        let num_pow = this.state.num_pow;\n        let shadow = this.state.shadow;\n\n        let exp;\n\n\n          //for 소수점 위//\n          if (is_float === false) {\n            if (operator === false) {\n              if (is_first_num === true) { // [CASE 1] 연산자: 없음, 첫번째 숫자타이핑: Y\n                is_first_num = false;\n                num_displayed = num;\n              } else { // [CASE 2] 연산자: 없음, 첫번째 숫자: N\n                num_displayed = num_displayed * 10 + num;\n              }\n            } else {\n              if (is_first_num === true) { // [CASE 3] 연산자: 있음, 첫번째 숫자타이핑: Y\n                is_overlapped = false;\n                if (num_displayed !== \"무한대\") {\n                  num_saved = num_displayed;\n                }\n                num_displayed = num;\n                is_first_num = false;\n              } else { // [CASE 4] 연산자: 있음, 첫번째 숫자타이핑: N\n                num_displayed = num_displayed * 10 + num;\n              }\n            }\n          }\n\n\n          //for 소수점 아래//\n          else {\n            num_pow += 1; //몇번째 소수점인지에 대한 숫자.\n            exp = Math.pow(0.1, num_pow);\n\n            if (operator === false) {\n              if (is_under_first_num === true) { // [CASE 1] 연산자: 없음, 첫번째 소수 타이핑: Y\n                is_under_first_num = false;\n                num_under_point = num * exp;\n                num_displayed = num_displayed + num_under_point;\n              } else { // [CASE 2] 연산자: 없음, 첫번째 소수 타이핑: N\n                num_under_point = num * exp;\n                num_displayed = num_displayed + num_under_point;\n              }\n            } else {\n              if (is_under_first_num === true) { // [CASE 3] 연산자: 있음, 첫번째 소수 타이핑: Y\n                is_under_first_num = false;\n                is_overlapped = false;\n                num_under_point = num * exp;\n                num_displayed = num_displayed + num_under_point;\n              } else { // [CASE 4] 연산자: 있음, 첫번째 소수 타이핑: N\n                num_under_point = num * exp;\n                num_displayed = num_displayed + num_under_point;\n              }\n            }\n\n\n    //      num_displayed = num_displayed.toFixed(num_pow);\n          }\n\n          if(operator === false) {\n            shadow = \" \";\n          } else {\n            shadow = num_saved + \" \" + operator;\n          }\n\n        this.setState({\n          is_overlapped: is_overlapped,\n          operator: operator,\n          num_displayed: num_displayed,\n          is_first_num: is_first_num,\n          num_saved: num_saved,\n          is_float: is_float,\n          num_under_point: num_under_point,\n          is_under_first_num: is_under_first_num,\n          num_pow: num_pow,\n          shadow: shadow\n        });\n      }\n\n      refreshValue = () => () => {\n        this.setState({\n          operator: false,\n          is_overlapped: false,\n          is_first_num: true,\n          num_saved: 0,\n          num_displayed: 0,\n          is_float: false,\n          num_under_point: 0,\n          is_under_first_num: true,\n          num_pow: 0,\n          shadow: \" \"\n        });\n      }\n\n      clickOper = (oper) => () => {\n        let is_overlapped = this.state.is_overlapped;\n        let operator = this.state.operator;\n        let num_saved = this.state.num_saved;\n        let num_displayed = this.state.num_displayed;\n        let is_first_num = this.state.is_first_num;\n        let is_float = this.state.is_float;\n        let num_pow = this.state.num_pow;\n        let num_under_point = this.state.num_under_point;\n        let shadow = this.state.shadow;\n\n\n        //  숫자 너무 크면 고정시키는 코드 넣어야함\n\n        if (is_overlapped === false) {\n          shadow = \" \";\n          if (operator === '+') { //중복이 아닌, 첫번째 연산자 입력일 경우\n            num_saved = num_saved + num_displayed;\n            num_displayed = num_saved;\n          } else if (operator === '-') {\n            num_saved = num_saved - num_displayed;\n            num_displayed = num_saved;\n          } else if (operator === '*') {\n            num_saved = num_saved * num_displayed;\n            num_displayed = num_saved;\n          } else if (operator === '/') {\n            if(num_displayed === 0) {\n              shadow = num_saved + \" \" + operator;\n              num_displayed = \"무한대\";\n            } else {\n              num_saved = num_saved / num_displayed;\n              num_displayed = num_saved;\n\n            }\n          }\n        }\n\n        is_first_num = true;\n        is_overlapped = true;\n\n        if (oper !== '=') {\n          operator = oper;\n          is_float = false;\n          num_pow = 0;\n          num_under_point = 0;\n        }\n\n\n        this.setState({\n          is_overlapped: is_overlapped,\n          operator: operator,\n          num_saved: num_saved,\n          num_displayed: num_displayed,\n          is_first_num: is_first_num,\n          is_float: is_float,\n          num_pow: num_pow,\n          num_under_point: num_under_point,\n          shadow: shadow\n        });\n\n\n      }\n\n\n\n      clickPoint = () => () => {\n        let is_float = this.state.is_float;\n\n        is_float = true;\n\n        this.setState({\n          is_float: is_float\n        });\n      }\n\n\n      render() {\n        return (\n            <div className=\"App\">\n\n              <div className=\"same\">\n                <div className=\"typingtool\">\n                  <div className=\"flex_typingtool\">\n                    <div className=\"shadow_typing\">\n                      {this.state.shadow}\n                    </div>\n                    <div className=\"typing\">\n                      {this.state.num_displayed}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"caltool\">\n                  <div className=\"flex_cartool\">\n                    <div onClick={this.refreshValue()} className=\"first_three\">AC</div>\n                    <div onClick={this.clickOper(\"/\")} className=\"first_one\">/</div>\n                  </div>\n\n                  <div className=\"flex_cartool\">\n                    <div onClick={this.clickNum(7)} className=\"rest_one\">7</div>\n                    <div onClick={this.clickNum(8)} className=\"rest_one\">8</div>\n                    <div onClick={this.clickNum(9)} className=\"rest_one\">9</div>\n                    <div onClick={this.clickOper(\"*\")} className=\"rest_one\">*</div>\n                  </div>\n\n                  <div className=\"flex_cartool\">\n                    <div onClick={this.clickNum(4)} className=\"rest_one\">4</div>\n                    <div onClick={this.clickNum(5)} className=\"rest_one\">5</div>\n                    <div onClick={this.clickNum(6)} className=\"rest_one\">6</div>\n                    <div onClick={this.clickOper(\"-\")} className=\"rest_one\">-</div>\n                  </div>\n\n                  <div className=\"flex_cartool\">\n                    <div onClick={this.clickNum(1)} className=\"rest_one\">1</div>\n                    <div onClick={this.clickNum(2)} className=\"rest_one\">2</div>\n                    <div onClick={this.clickNum(3)} className=\"rest_one\">3</div>\n                    <div onClick={this.clickOper(\"+\")} className=\"rest_one\">+</div>\n                  </div>\n\n                  <div className=\"flex_cartool\">\n                    <div onClick={this.clickNum(0)} className=\"rest_two\">0</div>\n                    <div onClick={this.clickPoint()} className=\"rest_one\">.</div>\n                    <div onClick={this.clickOper(\"=\")} className=\"rest_one\">=</div>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n        );\n      }\n    }\n\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}